When would you want to use a remote repository rather than keeping all your work local?

  To share work and to keep work backed up, a remote repository is needed.  

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
	
	Changes in the remote repository might not be compatible with your current work.  Maybe a new branch on the remote might overwrite a local branch, like maybe you did all your work in master (bad idea). 

Describe the differences between forks, clones, and branches. When would you use one instead of another?

	Forks and clones are the most similar.  They both create a copy of a repository.  Clone makes a copy of a repository onto a machine you have control over.  Fork is a GitHub specific clone, in that it only works on GitHub.com.  It clones a repository into your GitHub account, and shows a link between your repository and the forked repository to give credit to the original programmer.  A fork can be seen as a split in repository ownership and direction (i.e. Larry's recipes and my recipes), while a branch, being inside a repository, can be seen as a split in the direction of development (i.e. experimental vs. production branches). 

What is the benefit of having a copy of the last known state of the remote stored locally?

	Showing the changes since the last contact with remote is only possible with a local copy of remote.  

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

	Collaboration without GitHub needs a different way to transfer and sync files, namely, a shared cloud folder.  I think the only easy thing about that would be the absence of learning another interface, but sharing changes on a file would become much harder.  Every file change would need a new file name entered manually, and there would not be that convenient 'git merge'.  

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

	Making a separate branch gives a developer their own space to work in, and to experiment in.  Having that branch to experiment in keeps the focus of the branch on achieving one goal, and keeps the concerns and new commits of the master branch separate.  The new branch can be merged into the master branch when the changes are ready to be accepted.  If there is no need for experimentation and there are no other developers to make new commits to master, then working in master could make sense.  
